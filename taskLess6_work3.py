""" 3: Давайте опишем пару сущностей player
и enemy через словарь, который будет иметь
ключи и значения: name - строка полученная
от пользователя, health = 100, damage = 50.
Поэкспериментируйте с значениями урона и жизней по желанию.
Создайте функцию attack(person1, person2).
Примечание: имена аргументов можете указать свои.
Функция в качестве аргумента будет принимать атакующего
и атакуемого. В теле функция должна получить параметр
damage атакующего и отнять это количество от health
атакуемого. Функция должна сама работать со словарями
и изменять их значения.
Усложнение задачи: Измените сущности, добавив новый
параметр - armor = 1.2 (величина брони персонажа)
Теперь надо добавить новую функцию, которая будет
вычислять и возвращать полученный урон по формуле damage / armor
Следовательно, у вас должно быть 2 функции:
Наносит урон. Это улучшенная версия функции из задачи 3.
Вычисляет урон по отношению к броне.
Примечание. Функция номер 2 используется внутри функции
номер 1 для вычисления урона и вычитания его из здоровья персонажа.
"""
player_name = input('Enter gamer name: ')

player = {  # словарь!
    'name': player_name,
    'health': 100,
    'damage': 100,
    'armor': 1.2  # броня (0.2)
}

enemy_name = input('Enter enemy name: ')

enemy = {
    'name': enemy_name,
    'health': 50,
    'damage': 30,
    'armor': 1.0  # броня (нет брони)
}


# Объявляем функцию, указываем 2 аргумента
def get_damage(damage, armor):
    return damage / armor


def attack(unit, target):
    # объявляем переменную и вызываем функцию
    damage = get_damage(unit['damage'], target)
    # health, damage - ключ
    # условие игры -
    target['health'] -= damage


# ход игрока
attack(player, enemy)  # запускаем функцию (игрок атакует врага)
print(enemy)

# ход врага
attack(enemy, player)  # запускаем функцию (враг атакует игрока)
print(player)
